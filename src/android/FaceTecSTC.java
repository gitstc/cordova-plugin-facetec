package com.stc.facetec;

import android.util.Log;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;

import okhttp3.Call;
import okhttp3.Callback;

import java.io.IOException;

import static java.util.UUID.randomUUID;

import com.facetec.sdk.FaceTecIDScanResult;
import com.facetec.sdk.FaceTecIDScanStatus;
import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;
import com.facetec.sdk.FaceTecSessionStatus;

public class FaceTecSTC extends CordovaPlugin {

    public FaceTecSessionResult latestSessionResult;
    public FaceTecIDScanResult latestIDScanResult;
    public Processor latestProcessor;
    String latestExternalDatabaseRefID = "";
    private boolean isSessionPreparingToLaunch = false;

    private String TAG = "FacetecTest";

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
    if(action.equals("MatchFaceID")){





        Config.initializeFaceTecSDKFromAutogeneratedConfig(cordova.getContext(), new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if(successful) {
                    Log.d("FaceTecSDKSampleApp", "Initialization Successful.");

                    getSessionToken(new SessionTokenCallback() {
                        @Override
                        public void onSessionTokenReceived(String sessionToken) {
                            isSessionPreparingToLaunch = false;
                            latestExternalDatabaseRefID = "android_sample_app_" + randomUUID();
                            latestProcessor = new PhotoIDMatchProcessor(sessionToken, cordova.getActivity(), latestExternalDatabaseRefID, new PhotoIDMatchProcessor.PhotoIDMatchProcessorCallback() {
                                @Override
                                public void onIDScanResult(FaceTecIDScanResult result) {
                                    latestIDScanResult = result;
                                }

                                @Override
                                public void onSessionResult(FaceTecSessionResult result) {
                                    latestSessionResult = result;
                                }
                            });
                        }
                    });
                }

                // Displays the FaceTec SDK Status to text field.
                Log.d("FaceTecSDKSampleApp", FaceTecSDK.getStatus(cordova.getActivity()).toString());
            }
        });
    




            return true;

        }
        return false;
    
    }
    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
        Log.d(TAG, "Getting Sesssion Token...");

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.d("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
                        Log.e(TAG, "Failed to get session token " + responseString);
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.d("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                }
            }
        });
    }
}